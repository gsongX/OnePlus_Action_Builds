name: Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions


inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    required: true
    type: string
    default: ""
    description: "SUSFS branch"
  power_saving_config:
    required: false
    type: string
    default: ""

runs:
    using: "composite"
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'false'                # Enable detailed logging

      - name: Setup Build System
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          # Remove large unwanted packages
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org microsoft-edge-stable || true
          
          # Regex-based purges (for bulk families like mysql, php, dotnet)
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          # Clean up
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h
          
          # Install dependencies
          echo "Installing Repo and Python"
          sudo apt update
          sudo apt upgrade -y
          sudo apt install -y python3 python-is-python3 git curl
          
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV
          
          # Set CONFIG Environment Variable
          echo "CONFIG=${{ inputs.model }}" >> $GITHUB_ENV

      - name: Set Environment Variable # 设置内核环境变量
        shell: bash
        run: |
          # CONFIG==OP12
          # PLATFORM_DIR=/home/runner/work/OnePlus_KernelSU_SUSFS/OnePlus_KernelSU_SUSFS/OP12/.repo/projects/kernel_platform
          WORKSPACE_DIR="$GITHUB_WORKSPACE/$CONFIG"
          PLATFORM_DIR="$WORKSPACE_DIR/kernel_platform"
          COMMON_DIR="$PLATFORM_DIR/common"
          DEFCONFIG="$COMMON_DIR/arch/arm64/configs/gki_defconfig"
          MSMCONFIG="$PLATFORM_DIR/msm-kernel/arch/arm64/configs/gki_defconfig"

          # Set working DIR as an environment variable for future steps
          echo "WORKSPACE=$WORKSPACE_DIR" >> $GITHUB_ENV
          echo "PLATFORM=$PLATFORM_DIR" >> $GITHUB_ENV
          echo "COMMON=$COMMON_DIR" >> $GITHUB_ENV
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV
          echo "MSMCONFIG=$MSMCONFIG" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        shell: bash
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="gki-2.0"
          if [[ -z "${{ inputs.susfs_branch }}" ]]; then
            SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          else
            SUSFS_BRANCH="${{ inputs.susfs_branch }}"
          fi
          
          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          
          # Clone repositories using the branch names
          git clone https://github.com/WildKernels/AnyKernel3.git -b "$ANYKERNEL_BRANCH" 
          git clone https://github.com/WildKernels/kernel_patches.git 
          
          # Clone the repo with all branches and history (can optimize later if needed)
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu || exit 1
          
          # Try to check if TARGET_REF is a valid branch or tag
          if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1 ; then
            # It's a branch or commit hash
            git checkout "$SUSFS_BRANCH"
          else
            echo "Error: '$TARGET_REF' is neither a valid branch/tag nor a valid commit hash."
            exit 1
          fi

      - name: Initialize and Sync Kernel Source
        shell: bash
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          $REPO init -u https://github.com/gsongX/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
          
          # Sync repo and apply patches
          $REPO --version
          $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

      - name: Add New LLVM and CLang Version 
        shell: bash
        run: |
          echo "Clang Setting : $CONFIG..."

          git clone https://git.codelinaro.org/clo/la/kernelplatform/prebuilts-master/clang/host/linux-x86 $PLATFORM/prebuilts/clang/host/linux-x86/clang -b aosp-new/main --depth=1
          # git clone https://git.codelinaro.org/clo/la/kernelplatform/prebuilts-master/clang/host/linux-x86 $PLATFORM/prebuilts/clang/host/linux-x86/clang -b aosp-new/android15-qpr2-release --depth=1
          
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-3289846"
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r498229b"
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r510928"
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r530567"
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r530567b"
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r536225"

          ## clang-r536225
          
          # rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r522817"
          # rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r547379"

          # mv $PLATFORM/prebuilts/clang/host/linux-x86/clang/clang-r536225 $PLATFORM/prebuilts/clang/host/linux-x86
          # rm -rf rm -rf $PLATFORM/prebuilts/clang/host/linux-x86/llvm-binutils-stable
          # cp -r $PLATFORM/prebuilts/clang/host/linux-x86/clang/llvm-binutils-stable  $PLATFORM/prebuilts/clang/host/linux-x86/llvm-binutils-stable
          # rm -rf $PLATFORM/prebuilts/clang/host/linux-x86/profiles
          # cp -r $PLATFORM/prebuilts/clang/host/linux-x86/clang/profiles $PLATFORM/prebuilts/clang/host/linux-x86/profiles
          
          # sed -i 's/r510928/r536225/g' $PLATFORM/common/build.config.constants
          # sed -i 's/r510928/r536225/g' $PLATFORM/msm-kernel/build.config.constants
          # sed -i 's/r510928/r536225/g' $PLATFORM/.source_date_epoch_dir/build.config.constants | true
          # sed -i '/VERSIONS = \[/,/\]/c\VERSIONS = [\n    # keep sorted\n    "r536225",\n]' $PLATFORM/prebuilts/clang/host/linux-x86/kleaf/versions.bzl | true


          ## clang-r522817
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r547379"

          mv $PLATFORM/prebuilts/clang/host/linux-x86/clang/clang-r522817 $PLATFORM/prebuilts/clang/host/linux-x86
            
          sed -i 's/r510928/r522817/g' $PLATFORM/common/build.config.constants
          sed -i 's/r510928/r522817/g' $PLATFORM/msm-kernel/build.config.constants
          sed -i 's/r510928/r522817/g' $PLATFORM/.source_date_epoch_dir/build.config.constants | true
          sed -i '/VERSIONS = \[/,/\]/c\VERSIONS = [\n    # keep sorted\n    "r522817",\n]' $PLATFORM/prebuilts/clang/host/linux-x86/kleaf/versions.bzl | true

          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang"

      - name: Add KernelSU Next
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding KernelSU Next..."
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi

          git submodule update --init --recursive

      - name: Apply SUSFS Patches
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../../susfs4ksu/kernel_patches/fs/* $PLATFORM/common/fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* $PLATFORM/common/include/linux/
          
          cd ./KernelSU-Next
          
          echo "Applying next SUSFS patches..."
          susfs_version=$(grep '#define SUSFS_VERSION' ../common/include/linux/susfs.h | awk -F'"' '{print $2}')
          echo "SUSVER=$susfs_version" >> $GITHUB_ENV
          BASE_VERSION=10200
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" $PLATFORM/KernelSU-Next/kernel/Makefile
          sed -i "s/KSU_VERSION := 11998/KSU_VERSION := ${KSU_VERSION}/" $PLATFORM/KernelSU-Next/kernel/Makefile
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "KernelSU Next Version: $KSU_VERSION"
          echo "SusFS Version: $susfs_version"
          
          case "$susfs_version" in
            "v1.5.5"|"v1.5.6"|"v1.5.7")
              cp "../../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch" "./ksun_susfs_latest.patch"
              ;;
            "v1.5.8"|"v1.5.9")
              cp "../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch" ./
              patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
              #Hunk #1 FAILED at 314.
              cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_apk_sign.c.patch" ./
              patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
              #Hunk #2 FAILED at 46.
              #Hunk #14 FAILED at 915.
              #Hunk #18 FAILED at 1009.
              cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_core_hook.c.patch" ./
              patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
              #Hunk #3 FAILED at 57.
              cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_selinux.c.patch" ./
              patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
              #Hunk #1 FAILED at 57.
              cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_ksud.c.patch" ./
              patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
              #Hunk #1 FAILED at 24
              cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_rules.c.patch" ./
              patch -p1 --forward --fuzz=3 < fix_rules.c.patch
              ;;
            *)
              echo "Invalid version: $susfs_version"
              exit 1
              ;;
          esac
          patch -p1 --forward < ksun_susfs_latest.patch || true
          
          
          # Change to common directory and apply SUSFS patch
          cd ../common
          if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
              if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                  sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
              else
                  echo "Line already present. Skipping insert."
              fi
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          
          KERNEL_VERSION="${{ inputs.kernel_version }}"
          MIN_VERSION="5.16"
          
          if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
            echo "Patching ptrace!"
            patch -p1 -F 3 < "../../../kernel_patches/gki_ptrace.patch"
          else
            echo "Kernel >= $MIN_VERSION, skipping ptrace patch"
          fi
          
          #已经https://github.com/gsongX/android_kernel_common_oneplus_sm8750/tree/oneplus/sm8750_v_15.0.0_oneplus_13 hmbird 补丁了，这个就不用了，先测试一下
          #sm8750_v_15.0.0_oneplus_13 有了hmbird_files_patch.patch补丁
          #sm8750_v_15.0.0_oneplus_ace5_pro 还没有hmbird_files_patch.patch补丁
          if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
            echo "Patching hmbird!"
            echo 'obj-y += hmbird_patch.o' >> ./drivers/Makefile
            patch -p1 -F 3 < "../../../kernel_patches/oneplus/hmbird/hmbird_kernel_patch.patch"
            echo "Patching hmbird files!"
            cd ./kernel/sched
            rm -rf ext.c ext.h build_policy.c slim.h slim_sysctl.c hmbird_sched_proc.h hmbird_sched_proc_main.c
            patch -p1 -F 3 < "../../../../../kernel_patches/oneplus/hmbird/hmbird_files_patch.patch"
          else
            echo "Not OPAce5Pro / OP13 , skipping fengchi patch"
          fi

      - name: Apply KSUN Hooks
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          echo "Applying KSUN Hooks..."
          cp ../../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./manual_hooks.patch
          patch -p1 --fuzz=3 < ./manual_hooks.patch
          
      - name: Apply Hide Stuff Patches
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          # Apply additional patch
          cp ../../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Add KernelSU-Next and SUSFS Configuration Settings
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_WITH_KPROBES=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$DEFCONFIG"
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$DEFCONFIG"

      - name: Configure kernel
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"

          # Remove protected exports and strings
          rm $PLATFORM/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm $PLATFORM/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
          echo "Adding configuration settings to gki_defconfig..."
          # ===== 网络优化 =====
          # Add bbr and fq config setting
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$DEFCONFIG"
          echo "CONFIG_DEFAULT_BBR=y" >>  "$DEFCONFIG"
          
          echo "CONFIG_NET_SCH_FQ=y" >> "$DEFCONFIG"
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP_ECN=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_ECN=y" >> "$DEFCONFIG"
          echo "CONFIG_IPV6_ECN=y" >> "$DEFCONFIG"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$DEFCONFIG"

          # Set ZRAM
          echo "CONFIG_ZRAM_DEF_COMP_LZORLE=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_LZO=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_ZSTD=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_LZ4HC=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_842=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "$DEFCONFIG"
          echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "$DEFCONFIG"

          # ===== 日志优化 =====
          # 减少内核日志输出
          echo "CONFIG_PRINTK_SAFE_LOG_BUF_SHIFT=12" >> "$DEFCONFIG"
          echo "CONFIG_DYNAMIC_DEBUG=n" >> "$DEFCONFIG"
          echo "CONFIG_DEBUG_KERNEL=n" >> "$DEFCONFIG"

          # Lazy RCU优化
          echo "CONFIG_RCU_TRACE=n" >> "$DEFCONFIG"
          echo "CONFIG_RCU_LAZY=y" >> "$DEFCONFIG"

          # ===== 编译优化 =====
          # 启用LTO和优化选项
          echo "CONFIG_LTO_CLANG=y" >> "$DEFCONFIG"
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$DEFCONFIG"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$DEFCONFIG"
          echo "CONFIG_CC_DISABLE_WARN_MAYBE_UNINITIALIZED=y" >> "$DEFCONFIG"
          # echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y" >> "$DEFCONFIG"

          # Wakelock Blocker
          echo "CONFIG_BOEFFLA_WL_BLOCKER=y" >> "$DEFCONFIG"
          sed -i 's/CONFIG_PM_WAKELOCKS_LIMIT=0/CONFIG_PM_WAKELOCKS_LIMIT=10/' "$DEFCONFIG"
          sed -i 's/# CONFIG_PM_WAKELOCKS_GC is not set/CONFIG_PM_WAKELOCKS_GC=y/' "$DEFCONFIG"
          sed -i 's/placeholder/gauge;sscrpcd:2310;b0000000.qcom,cnss-peach;wired wakelock;cne_wl_;radio-data-interface;fastrpc-secure;event0;event8;event2;event3;9-0028;amd_lock;lux_aod_lock;a600000.ssusb;qcom_rx_wakelock;wlan;wlan_wow_wl;IPA_WS;wlan_ipa;wlan_pno_wl;DIAG_WS;qcom_sap_wakelock;pmo_wow_wl;898000.qcom,qup_uart;rmnet_ctl;SensorsHAL_WAKEUP;ena600000.ssusb;gesture_prox_lock;gnss_hal;prox_lock;IPA_CLIENT_APPS_LAN_CONS;IPA_CLIENT_APPS_WAN_LOW_LAT_CONS;RMNET_SHS;IPA_CLIENT_APPS_WAN_COAL_CONS;oplus_shaking_lock;8-0028;phone_prox_lock;qrtr_ws;rmnet_ipa%d;wlan_ap_assoc_lost_wl;radio-data-interface;tftp_server_wakelock;pedometer_minute_lock;wlan_roam_ho_wl;wlan_rx_wakelock;ipa_ws;cnss_daemon_wa;LocationManagerService;NlpWakelock;SensorService;AudioMix;*backup*;SyncManagerWakelock;10-0028;vdev_start;event8;eventpoll/' "$COMMON/drivers/base/power/boeffla_wl_blocker.h" || true
          # sed -i 's/placeholder/gauge;sscrpcd:2310;b0000000.qcom,cnss-peach;wired wakelock;cne_wl_;radio-data-interface;fastrpc-secure;eventpoll;event0;event8;event2;event3;9-0028;amd_lock;lux_aod_lock;a600000.ssusb;qcom_rx_wakelock;wlan;wlan_wow_wl;NETLINK;IPA_WS;\[timerfd\];wlan_ipa;wlan_pno_wl;DIAG_WS;qcom_sap_wakelock;pmo_wow_wl;898000.qcom,qup_uart;rmnet_ctl;hal_bluetooth_lock;SensorsHAL_WAKEUP;ena600000.ssusb;gesture_prox_lock;gnss_hal;prox_lock;IPA_CLIENT_APPS_LAN_CONS;IPA_CLIENT_APPS_WAN_LOW_LAT_CONS;RMNET_SHS;IPA_CLIENT_APPS_WAN_COAL_CONS;oplus_shaking_lock;8-0028;phone_prox_lock;qrtr_ws;rmnet_ipa%d;wlan_ap_assoc_lost_wl;radio-data-interface;tftp_server_wakelock;pedometer_minute_lock;wlan_roam_ho_wl;10-0028;vdev_start;event8;eventpoll/' "$COMMON/drivers/base/power/boeffla_wl_blocker.h" || true

          # Optimization
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y" >> "$DEFCONFIG"
          echo "CONFIG_DYNAMIC_FTRACE_WITH_CALL_OPS=y" >> "$DEFCONFIG"
          echo "CONFIG_SCHED_CLUSTER=y" >> "$DEFCONFIG"

          # Polly
          #echo "CONFIG_POLLY_CLANG=y" >> "$DEFCONFIG"
          echo "CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y" >> "$DEFCONFIG"

          # LRNG
          echo "CONFIG_LRNG=y" >> "$DEFCONFIG"
          echo "CONFIG_RANDOM_DEFAULT_IMPL=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_IRQ=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_SCHED=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_CPU=y" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_JENT=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED=y" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_DRNG_ATOMIC=y" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_SELFTEST=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_RANDOM_IF=y" >> "$DEFCONFIG"
          
          # Filesystem Features
          echo "CONFIG_TMPFS_XATTR=y" >> "$DEFCONFIG"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$DEFCONFIG"


          # Remove unnecessary defconfig entries
          sed -i "s/CONFIG_PRINTK_TIME=y/CONFIG_PRINTK_TIME=n/" "$DEFCONFIG"
          sed -i "s/CONFIG_PRINTK_CALLER=y/CONFIG_PRINTK_CALLER=n/" "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_CUBIC=n" >> "$DEFCONFIG"
          echo "CONFIG_MQ_IOSCHED_KYBER=n" >> "$DEFCONFIG"

          # ===== F2FS优化 =====
          # 防止ROOT后性能下降
          echo "CONFIG_F2FS_UNFAIR_RWSEM=y" >> "$DEFCONFIG"
          echo "CONFIG_F2FS_FS_DISABLE_TURBO_WRITE=y" >> "$DEFCONFIG"

      - name: Force ECN + Reduce overhead
        shell: bash
        if: ${{ inputs.kernel_version == '6.6' || inputs.kernel_version == '6.1' }}
        run: |
          cd "$CONFIG/kernel_platform/common/net/ipv4"
          sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 1;/' tcp_ipv4.c
          grep "sysctl_tcp_ecn" tcp_ipv4.c
          sed -i '/\.procname[[:space:]]*=[[:space:]]*"tcp_ecn"/, /^[[:space:]]*\}/ s/SYSCTL_TWO/SYSCTL_ONE/' sysctl_net_ipv4.c
          grep -A6 '\.procname.*tcp_ecn' sysctl_net_ipv4.c
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' tcp_ipv4.c
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' tcp_ipv4.c
          grep "sysctl_tcp_pacing" tcp_ipv4.c
          ls -t | grep -E 'tcp_|sysctl_'

      - name: Add TTL Target Support
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"

          echo "Adding configuration settings to gki_defconfig..."
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$DEFCONFIG"
      
      - name: Run sed and perl Commands
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Running sed commands..."
          
          # Adjust localversion strings
          sed -i 's/check_defconfig//' ./common/build.config.gki
          # For Old setlocalversion Script
          tac ./common/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-gs0ng\;echo "\$res"\;/' | tac > ./common/scripts/setlocalversion.tmp && mv ./common/scripts/setlocalversion.tmp ./common/scripts/setlocalversion
          tac ./msm-kernel/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-gs0ng\;echo "\$res"\;/' | tac > ./msm-kernel/scripts/setlocalversion.tmp && mv ./msm-kernel/scripts/setlocalversion.tmp ./msm-kernel/scripts/setlocalversion
          tac ./external/dtc/scripts/setlocalversion | sed '0,/echo "\$res"/s//res=\$\(echo \$res \| cut -d- -f1-2\)-gs0ng\;echo "\$res"\;/' | tac > ./external/dtc/scripts/setlocalversion.tmp && mv ./external/dtc/scripts/setlocalversion.tmp ./external/dtc/scripts/setlocalversion
          # For New setlocalversion Script
          sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-gs0ng"/' ./common/scripts/setlocalversion
          sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-gs0ng"/' ./msm-kernel/scripts/setlocalversion
          sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-gs0ng"/' ./external/dtc/scripts/setlocalversion
          chmod +x ./common/scripts/setlocalversion
          chmod +x ./msm-kernel/scripts/setlocalversion
          chmod +x ./external/dtc/scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!"
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"

          # Set LTO
          echo 'CONFIG_LTO=y' >> "$DEFCONFIG"
          echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"
          echo 'CONFIG_LTO_CLANG_THIN=y' >>"$DEFCONFIG"
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"

          # Set LTO
          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh
         
          # Run perl command to modify UTS_VERSION
          DATESTR=$(date -u)
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./common/scripts/mkcompile_h
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./msm-kernel/scripts/mkcompile_h

      - name: Build the Kernel
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Building the kernel..."
          # Clear Cache
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          
          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.soc }}" == "sun" ]; then
            BUILD_TYPE="perf"
            BAZEL_ARGS+=(-g)
          fi
          
          (stdbuf -oL bash -c '
            while true; do
              echo "=== $(date) ==="
              free -h
              echo "======"
              df -h
              echo "======"
              top -b -n 1 | head -n 15
              echo ""
              sleep 60
            done
          ') &
          MONITOR_PID=$!
          trap "kill $MONITOR_PID" EXIT
          
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
          fi

      - name: Create ZIP Files for Different Formats
        shell: bash
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Copying Image"
          cp ./out/dist/Image ../AnyKernel3/Image
          
          echo "Navigating to AnyKernel3 directory..."
          cd ../AnyKernel3
          
          if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
            cp ../kernel_patches/oneplus/hmbird/bins/* ./tools/
            patch -F 3 < ../kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch
          fi
          
          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_Next_${{ env.KSUVER }}_SUSFS_${{ env.SUSVER }}.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
