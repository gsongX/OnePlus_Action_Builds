commit dfb18daea1b526e9a0bdb40ef5d3639f26ae0f56
Author: reigadegr <272268642@qq.com>
Date:   Sat Jul 12 02:54:23 2025 +0800

    Revert "cpufreq: Avoid using inconsistent policy->min and policy->max"
    
    This reverts commit cbd54987db25aceea41ddf8ebe6c8fd90f643f35.

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 0e6320436190..403c36024024 100755
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -545,6 +545,8 @@ static unsigned int __resolve_freq(struct cpufreq_policy *policy,
 
 	trace_android_vh_cpufreq_resolve_freq(policy, &target_freq, old_target_freq);
 
+	target_freq = clamp_val(target_freq, policy->min, policy->max);
+
 	if (!policy->freq_table)
 		return target_freq;
 
@@ -568,22 +570,7 @@ static unsigned int __resolve_freq(struct cpufreq_policy *policy,
 unsigned int cpufreq_driver_resolve_freq(struct cpufreq_policy *policy,
 					 unsigned int target_freq)
 {
-	unsigned int min = READ_ONCE(policy->min);
-	unsigned int max = READ_ONCE(policy->max);
-
-	/*
-	 * If this function runs in parallel with cpufreq_set_policy(), it may
-	 * read policy->min before the update and policy->max after the update
-	 * or the other way around, so there is no ordering guarantee.
-	 *
-	 * Resolve this by always honoring the max (in case it comes from
-	 * thermal throttling or similar).
-	 */
-	if (unlikely(min > max))
-		min = max;
-
-	return __resolve_freq(policy, clamp_val(target_freq, min, max),
-			      CPUFREQ_RELATION_LE);
+	return __resolve_freq(policy, target_freq, CPUFREQ_RELATION_LE);
 }
 EXPORT_SYMBOL_GPL(cpufreq_driver_resolve_freq);
 
@@ -2369,7 +2356,6 @@ int __cpufreq_driver_target(struct cpufreq_policy *policy,
 	if (cpufreq_disabled())
 		return -ENODEV;
 
-	target_freq = clamp_val(target_freq, policy->min, policy->max);
 	target_freq = __resolve_freq(policy, target_freq, relation);
 
 	trace_android_vh_cpufreq_target(policy, &target_freq, old_target_freq);
@@ -2662,15 +2648,11 @@ static int cpufreq_set_policy(struct cpufreq_policy *policy,
 	 * Resolve policy min/max to available frequencies. It ensures
 	 * no frequency resolution will neither overshoot the requested maximum
 	 * nor undershoot the requested minimum.
-	 *
-	 * Avoid storing intermediate values in policy->max or policy->min and
-	 * compiler optimizations around them because they may be accessed
-	 * concurrently by cpufreq_driver_resolve_freq() during the update.
 	 */
-	WRITE_ONCE(policy->max, __resolve_freq(policy, new_data.max, CPUFREQ_RELATION_H));
-	new_data.min = __resolve_freq(policy, new_data.min, CPUFREQ_RELATION_L);
-	WRITE_ONCE(policy->min, new_data.min > policy->max ? policy->max : new_data.min);
-
+	policy->min = new_data.min;
+	policy->max = new_data.max;
+	policy->min = __resolve_freq(policy, policy->min, CPUFREQ_RELATION_L);
+	policy->max = __resolve_freq(policy, policy->max, CPUFREQ_RELATION_H);
 	trace_cpu_frequency_limits(policy);
 
 	policy->cached_target_freq = UINT_MAX;
