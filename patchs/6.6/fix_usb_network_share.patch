commit ec38f23fa9089f73e905772cc6c5ad15637c2be8
Author: brokestar233 <3765589194@qq.com>
Date:   Thu Jul 3 03:10:05 2025 +0800

    Revert "usb: dwc3: gadget: Rewrite endpoint allocation flow"
    
    This reverts commit 65b1f31111eec98d02167e643887c51a04e0a0d0.
    
    The original commit caused a regression where USB Ethernet gadget (RNDIS/CDC ECM)
    fails to function properly. This breaks USB tethering and network sharing scenarios.
    
    Observed symptoms:
    - Network interface fails to enumerate
    - "setup endpoint" errors in dmesg during USB enumeration
    - Unable to establish network connection via USB tethering
    
    By reverting this endpoint allocation rewrite, we restore the functional USB gadget
    networking behavior while maintaining other endpoint operations.
    
    Signed-off-by: brokestar233 <3765589194@qq.com>

diff --git a/drivers/usb/dwc3/ep0.c b/drivers/usb/dwc3/ep0.c
index 874497f86499..1af47613812b 100644
--- a/drivers/usb/dwc3/ep0.c
+++ b/drivers/usb/dwc3/ep0.c
@@ -648,7 +648,6 @@ static int dwc3_ep0_set_config(struct dwc3 *dwc, struct usb_ctrlrequest *ctrl)
 		return -EINVAL;
 
 	case USB_STATE_ADDRESS:
-		dwc3_gadget_start_config(dwc, 2);
 		dwc3_gadget_clear_tx_fifos(dwc);
 
 		ret = dwc3_ep0_delegate_req(dwc, ctrl);
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 0cfb975702b7..5f48185061bd 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -516,61 +516,76 @@ static void dwc3_free_trb_pool(struct dwc3_ep *dep)
 static int dwc3_gadget_set_xfer_resource(struct dwc3_ep *dep)
 {
 	struct dwc3_gadget_ep_cmd_params params;
-	int ret;
-
-	if (dep->flags & DWC3_EP_RESOURCE_ALLOCATED)
-		return 0;
 
 	memset(&params, 0x00, sizeof(params));
 
 	params.param0 = DWC3_DEPXFERCFG_NUM_XFER_RES(1);
 
-	ret = dwc3_send_gadget_ep_cmd(dep, DWC3_DEPCMD_SETTRANSFRESOURCE,
+	return dwc3_send_gadget_ep_cmd(dep, DWC3_DEPCMD_SETTRANSFRESOURCE,
 			&params);
-	if (ret)
-		return ret;
-
-	dep->flags |= DWC3_EP_RESOURCE_ALLOCATED;
-	return 0;
 }
 
 /**
- * dwc3_gadget_start_config - reset endpoint resources
- * @dwc: pointer to the DWC3 context
- * @resource_index: DEPSTARTCFG.XferRscIdx value (must be 0 or 2)
+ * dwc3_gadget_start_config - configure ep resources
+ * @dep: endpoint that is being enabled
+ *
+ * Issue a %DWC3_DEPCMD_DEPSTARTCFG command to @dep. After the command's
+ * completion, it will set Transfer Resource for all available endpoints.
  *
- * Set resource_index=0 to reset all endpoints' resources allocation. Do this as
- * part of the power-on/soft-reset initialization.
+ * The assignment of transfer resources cannot perfectly follow the data book
+ * due to the fact that the controller driver does not have all knowledge of the
+ * configuration in advance. It is given this information piecemeal by the
+ * composite gadget framework after every SET_CONFIGURATION and
+ * SET_INTERFACE. Trying to follow the databook programming model in this
+ * scenario can cause errors. For two reasons:
  *
- * Set resource_index=2 to reset only non-control endpoints' resources. Do this
- * on receiving the SET_CONFIGURATION request or hibernation resume.
+ * 1) The databook says to do %DWC3_DEPCMD_DEPSTARTCFG for every
+ * %USB_REQ_SET_CONFIGURATION and %USB_REQ_SET_INTERFACE (8.1.5). This is
+ * incorrect in the scenario of multiple interfaces.
+ *
+ * 2) The databook does not mention doing more %DWC3_DEPCMD_DEPXFERCFG for new
+ * endpoint on alt setting (8.1.6).
+ *
+ * The following simplified method is used instead:
+ *
+ * All hardware endpoints can be assigned a transfer resource and this setting
+ * will stay persistent until either a core reset or hibernation. So whenever we
+ * do a %DWC3_DEPCMD_DEPSTARTCFG(0) we can go ahead and do
+ * %DWC3_DEPCMD_DEPXFERCFG for every hardware endpoint as well. We are
+ * guaranteed that there are as many transfer resources as endpoints.
+ *
+ * This function is called for each endpoint when it is being enabled but is
+ * triggered only when called for EP0-out, which always happens first, and which
+ * should only happen in one of the above conditions.
  */
-int dwc3_gadget_start_config(struct dwc3 *dwc, unsigned int resource_index)
+static int dwc3_gadget_start_config(struct dwc3_ep *dep)
 {
 	struct dwc3_gadget_ep_cmd_params params;
-	struct dwc3_ep		*dep;
+	struct dwc3		*dwc;
 	u32			cmd;
 	int			i;
 	int			ret;
 
-	if (resource_index != 0 && resource_index != 2)
-		return -EINVAL;
+	if (dep->number)
+		return 0;
 
 	memset(&params, 0x00, sizeof(params));
 	cmd = DWC3_DEPCMD_DEPSTARTCFG;
-	cmd |= DWC3_DEPCMD_PARAM(resource_index);
+	dwc = dep->dwc;
 
-	ret = dwc3_send_gadget_ep_cmd(dwc->eps[0], cmd, &params);
+	ret = dwc3_send_gadget_ep_cmd(dep, cmd, &params);
 	if (ret)
 		return ret;
 
-	/* Reset resource allocation flags */
-	for (i = resource_index; i < dwc->num_eps; i++) {
-		dep = dwc->eps[i];
+	for (i = 0; i < DWC3_ENDPOINTS_NUM; i++) {
+		struct dwc3_ep *dep = dwc->eps[i];
+
 		if (!dep)
 			continue;
 
-		dep->flags &= ~DWC3_EP_RESOURCE_ALLOCATED;
+		ret = dwc3_gadget_set_xfer_resource(dep);
+		if (ret)
+			return ret;
 	}
 
 	return 0;
@@ -906,18 +921,16 @@ static int __dwc3_gadget_ep_enable(struct dwc3_ep *dep, unsigned int action)
 		ret = dwc3_gadget_resize_tx_fifos(dep);
 		if (ret)
 			return ret;
+
+		ret = dwc3_gadget_start_config(dep);
+		if (ret)
+			return ret;
 	}
 
 	ret = dwc3_gadget_set_ep_config(dep, action);
 	if (ret)
 		return ret;
 
-	if (!(dep->flags & DWC3_EP_RESOURCE_ALLOCATED)) {
-		ret = dwc3_gadget_set_xfer_resource(dep);
-		if (ret)
-			return ret;
-	}
-
 	if (!(dep->flags & DWC3_EP_ENABLED)) {
 		struct dwc3_trb	*trb_st_hw;
 		struct dwc3_trb	*trb_link;
@@ -1071,7 +1084,7 @@ static int __dwc3_gadget_ep_disable(struct dwc3_ep *dep)
 
 	dep->stream_capable = false;
 	dep->type = 0;
-	mask = DWC3_EP_TXFIFO_RESIZED | DWC3_EP_RESOURCE_ALLOCATED;
+	mask = DWC3_EP_TXFIFO_RESIZED;
 	/*
 	 * dwc3_remove_requests() can exit early if DWC3 EP delayed stop is
 	 * set.  Do not clear DEP flags, so that the end transfer command will
@@ -2972,12 +2985,6 @@ static int __dwc3_gadget_start(struct dwc3 *dwc)
 	/* Start with SuperSpeed Default */
 	dwc3_gadget_ep0_desc.wMaxPacketSize = cpu_to_le16(512);
 
-	ret = dwc3_gadget_start_config(dwc, 0);
-	if (ret) {
-		dev_err(dwc->dev, "failed to config endpoints\n");
-		return ret;
-	}
-
 	dep = dwc->eps[0];
 	dep->flags = 0;
 	ret = __dwc3_gadget_ep_enable(dep, DWC3_DEPCFG_ACTION_INIT);
diff --git a/drivers/usb/dwc3/gadget.h b/drivers/usb/dwc3/gadget.h
index d73e735e4081..55a56cf67d73 100644
--- a/drivers/usb/dwc3/gadget.h
+++ b/drivers/usb/dwc3/gadget.h
@@ -119,7 +119,6 @@ int dwc3_gadget_ep0_queue(struct usb_ep *ep, struct usb_request *request,
 int __dwc3_gadget_ep_set_halt(struct dwc3_ep *dep, int value, int protocol);
 void dwc3_ep0_send_delayed_status(struct dwc3 *dwc);
 void dwc3_stop_active_transfer(struct dwc3_ep *dep, bool force, bool interrupt);
-int dwc3_gadget_start_config(struct dwc3 *dwc, unsigned int resource_index);
 
 /**
  * dwc3_gadget_ep_get_transfer_index - Gets transfer index from HW
